'''
Grant Ikehara, Cameron Healy, Dominic Soares
HW #6
hw6.py
CPSC 310-01
Purpose:
    To implement an a priori rule miner as opposed to the decision trees
    and random forests that we've been mucking around with. We're really
    just printing out a mined ruleset and describing it.
Design Checklist:
    No steps this time, should be interesting. So here's your list:
    [] Create aPriori Algorithm. 
    For titanic Dataset:
        At various min support levels:
            [] implement algorithm, mine rules
            [] print rules
            [] describe rules, do they:
                [] make sense
                [] compare to HW4 and HW5
        [] Discuss how various min support and confidence affected this.
        
    For shroom Dataset:
        At various min support levels:
            [] implement algorithm, mine rules
            [] print rules
            [] describe rules, do they:
                [] make sense
                [] compare to HW4 and HW5
            [] Read the book so you know what feature selection is
            [] Do feature selection
        [] Discuss how various min support and confidence affected this.
        
    
Issues:
    TBD. 
'''

import csv
import sys
import math
import copy
import numpy
from tabulate import tabulate
import random
from collections import Counter

'''
The read_csv() function is the same function introduced in class. It returns a table
filled with the selected file's CSV data. It is used to open all files.
'''
def read_csv(filename):
    the_file = open(filename, 'r')
    the_reader = csv.reader(the_file, dialect='excel')
    table = []
    for row in the_reader:
        if len(row) > 0:
            table.append(row)
    the_file.close()
    return table

'''
returns the frequencis of all attributes in the instance set as a dictionary
'''
def attribute_frequencies(instances, att_index, class_index):
    att_vals = list(set(get_column(instances, att_index))) 
    class_vals = list(set(get_column(instances, class_index)))
    result = {v: [{c: 0 for c in class_vals}, 0] for v in att_vals}
    for row in instances:
        label = row[class_index]
        att_val = row[att_index]
        result[att_val][0][label] += 1
        result[att_val][1] += 1
    return result
    
'''
As self-explanatory as it gets
'''
def getRidOfFirstLine(table): #Just for the titanic
    i = 0
    newtable = []
    for row in table:
        if i != 0:
            newtable.append(table[i])
        i +=1
    return newtable

'''
Returns a random subset of size F from the input table 
'''
def random_attribute_subset(attributes, F):
    # shuffle and pick first F
    shuffled = attributes[:]  # make a copy
    random.shuffle(shuffled)
    return shuffled[:F]



'''
Checks if all labels are the same.
'''
def isSame(table, classLabel): #checks for uniformity of class label.
    isIt = 0
    original = table[0][classLabel]
    for i in range(len(table)):
        if table[i][classLabel] != original:
            isIt = 1
    return isIt


'''
Gets a column in question.
'''
def get_column(table, ind): #parse all the data into different lists
    listylist = [] #               0
    i = 0            
    for row in table: #Get nice subdivisions
        listylist.append(table[i][ind])   
        i += 1
    i = 0
    return (listylist)#return all of the lists

'''
Returns the frequency of the itemset
'''
def get_itemset_freq(itemset, table):
    checks = len(itemset)
    counter = 0
    count_itemset = 0
    for row in table:
        for item in itemset:
            if item in row:
                counter += 1
        if counter == checks:
            count_itemset += 1
        counter = 0
    return count_itemset

'''
Returns the support of the itemset
'''
def get_support(itemset, table):
    count = get_itemset_freq(itemset, table)
    support = count/(len(table)*1.0)
    return support

'''
Returns the confidence of the itemset
'''
def get_confidence(itemset, table, LHS):
    count = get_itemset_freq(itemset, table)
    conf = count/(len(LHS)*1.0)
    return conf

'''
Returns the lift of the itemset
UNFINISHED
'''
def get_lift(itemset, table, LHS, RHS):
    count = get_itemset_freq(itemset, table)
    conf = count/((len(LHS)*1.0)*len(RHS)*1.0)
    return conf

'''
Returns the list of atts by column
'''
def get_col_atts(table, cols):
    ListOfAtts = []
    for i in range(cols):
        column = get_column(table, i)
        AttsInCol = []
        for item in column:
            if item not in AttsInCol:
                AttsInCol.append(item)
        ListOfAtts.append(AttsInCol)
    print ListOfAtts

'''
A priori algorithm for titanic
'''
def apriori_titanic(table, min_supp, min_conf):
    ListOfAtts = []
    for row in table:
        for item in row:
            if item not in ListOfAtts:
                ListOfAtts.append(item)


'''
Tabulation function. Once we have the rules, this arranges 'em nice and pretty.
'''
def tabulator(table):
    print "================="
    print "Titanic"
    print "================="
    z = [["null","null","null","null","null"]]
    
    print tabulate(z, headers= ["Left-Hand of Rule", "Right Side",
                                "Support", "Confidence", "Lift"])

    print "================="
    print "Shroomapalooza"
    print "================="

    x = [["null","null","null","null","null"]]
    
    print tabulate(x, headers= ["Left-Hand of Rule", "Right Side",
                                "Support", "Confidence", "Lift"])
    



'''
The main function
'''
def main():
    print "==========================================="
    print "STEP 1: "
    print "==========================================="
    table0 = read_csv('titanic.txt')
    table0 = getRidOfFirstLine(table0)

    table1 = read_csv('agaricus-lepiota.txt')
    get_col_atts(table0, 4)


if __name__ == '__main__':
    main()
